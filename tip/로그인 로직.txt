JWT(Json Web Token)
	- accessToken과 refreshToken이 존재
	
	* accessToken
		-> 실질적인 인증 정보를 가짐
		-> 일정 시간이 지나면 만료하는 구조
	* refreshToken
		-> 로그인은 지속적으로 유지 
		-> 클라이언트측에서 서버에 보내면 서버는 새로운 accessToken을 발급해 돌려준다
		-> 브라우저창 종료, 새로고침 시 refreshToken 사라짐


XSS와 CSRF
	- XSS 
		* 공격자가 악의적은 JS 코드를 사용자의 웹 브라우저에서 실행시키는 것
		* 해당 공격을 통해 사용자의 웹 브라우저에 저장된 정보 탈취 가능
		* JWT 토큰을 쿠키에 저장할 시 XSS 공격을 방어할 수 있다.
			-> httpOnly 설정을 통해 js에서 쿠키 접근을 차단할 수 있다.(서버에서 설정 가능)
			-> js로 request를 자동으로 보낼 수 있기 때문에, request에 쿠키가 자동으로 실리는 특성 상, 사용자 컴퓨터에서 위/변조가 가능

	-CSRF
		* 정상적인 request를 가로채 사용자인 척을 하여 서버에 변조된 request 요청을 전송하여 악의적인 동작을 수행시키는 것
		* 해당 공격을 통해 사용자의 정보를 무단으로 수정, 수집, 열람 할 수 있다.
		* JWT 토큰을 로컬 스토리지에 저장할 시 CSRF 공격을 방어할 수 있다.
			-> 자동으로 request에 담기는 쿠키와는 달리 js 코드에 의해 헤더에 담기므로 XSS가 뚫리지 않는 이상 CSRF 공격에 노출될 일이 없다.
			-> 다만 XSS에 취약, 공격자가 localStorage에 접근하는 js코드 주입 시, 공격자가 localStorage에 접근 가능


로그인 로직(with Redux)

1. 아이디, 비밀번호 입력 후 로그인 버튼 클릭 시 입력 정보 디스패치 진행 O
2. 리덕스 미들웨어에서 서버에 접근하여 데이터 전달 O
3. 서버에서 받은 데이터를 DB에 조회하여 아이디 일치 여부 확인 O
	A. 아이디 불일치 시 상태코드 500 전송 O
		* 리덕스 미들웨어에서 logState false로 변경 O
	B. 아이디 일치 시 비밀번호 체크 O
		B-1. 비밀번호 미일치 시 상태코드 500 전송 O
			* 리덕스 미들웨어에서 logState false로 변경 O
		B-2. 비밀번호 일치 시 JWT토큰 생성 O
		B-3. 생성한 JWT 토큰을 헤더에 포함시켜 프론트단으로 응답을 보낸다. O
4. 서버 확인 후 RTK 미들웨어에서 회원가입 성공 및 실패에 따른 스토어 상태를 규정한다 O
5. 만일 토큰을 받았을 경우, 받은 토큰을 로컬 스토리지에 저장한다. O
6. 로그인 여부를 확인해야 하는 페이지에 왔을 시, 로컬 스토리지에 저장된 토큰을 서버로 보낸다.  O
7. 서버에서 받은 세션이 유효한 지 검증한다.
	A. 프론트에서 준 토큰이 유효하지 않을 경우
		A-1. 서버 측에서 오류코드를 리덕스 미들웨어로 전송
		A-2. 리덕스 미들웨어에서 logState를 false로 변경
		A-3. false로 변경된 logState 상태를 프론트단에서 확인하여 로컬 스토리지에 있는 토큰 정보 일괄 삭제



로그인 로직(without Redux)

1. 아이디, 비밀번호 입력 후 로그인 버튼 클릭 시 입력 정보 서버로 전송 O
2. 서버에서 받은 데이터를 DB에 조회하여 아이디 일치 여부 확인 O
	A. 아이디 불일치 시 O
		A-1. 서버에서 상태코드 500 전송 O
		A-2. 아이디 불일치 화면 렌더링 O
	B. 아이디 일치 시 비밀번호 체크 O
		B-A. 비밀번호 불일치 시 O
			B-A-1. 서버에서 상태코드 500 전송 O
			B-A-2. 비밀번호 불일치 화면 렌더링 O
		B-B. 비밀번호 일치 시 O
			B-B-1. 서버에서 JWT 토큰 생성 O
			B-B-2. 생성한 JWT 토큰을 헤더에 포함시켜 프론트단으로 응답을 보낸다 O
3. 로그인 성공 후 서버에서 발급한 토큰을 로컬 스토리지에 저장 O

이후 로그인 상태 유지

1. 로컬 스토리지에 저장된 토큰 서버로 POST 전송 O
2. 서버에서 받은 토큰을 검증한다. O
	A. 토큰 검증 성공 시 O
		A-1. 프론트단으로 검증성공 데이터 res.send() 처리 O
	B. 토큰 검증 실패 시 O
		B-1. 프론트단으로 검증실패 데이터 res.send() 처리 O
3. 서버에서 응답받은 검증 결과 데이터를 state에 보관하여 로그인 화면 유지 O

로그아웃 로직

1. 로그아웃 버튼 클릭 후 로컬 스토리지에서 세션 삭제

	




